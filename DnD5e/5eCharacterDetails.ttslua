--[[    Character Sheet Template    by: MrStump

You can set up your own character sheet if you follow these steps.

Step 1) Change the character sheet image
    -Right click on the character sheet, click Custom
    -Replace the image URL with one for your character sheet
    -Click import, make sure your sheet loads
    -SAVE THE GAME (the table setup)
    -LOAD FROM THAT SAVE YOU JUST MADE

Step 2) Edit script to fit your character sheet
    -Below you will see some general options, and then the big data table
    -The data table is what determines how many of which buttons are made
        -Checkboxes
        -Counters
        -Textboxes
    -By default, there are 3 of each. You can add more or remove entries
    -If you intend to add/remove, be sure only to add/remove ENTRIES
        -This is what an entry looks like:
            {
                pos   = {-0.977,0.1,-0.589},
                size  = 800,
                state = false
            },
        -Deleting the whole thing would remove that specific item on the sheet
        -Copy and pasting it after another entry would create another
    -Each entry type has unique data points (pos, size, state, etc)
        -Do not try to add in your own data points or remove them individually
        -There is a summary of what each point does at the top of its category

Step 3) Save and check script changes
    -Hit Save & Apply in the script window to save your code
    -You can edit your code as needed and Save+Apply as often as needed
    -When you are finished, make disableSave = false below then Save+apply
        -This enables saving, so your sheet will remember whats on it.

Bonus) Finding/Editing Positions for elements
    I have included a tool to get positions for buttons in {x,y,z} form
    Place it where you want the center of your element to be
    Then copy the table from the notes (lower right of screen)
        You can highlight it and CTRL+C
    Paste it into the data table where needed (pos=)
    If you want to manually tweek the values:
        {0,0,0} is the center of the character sheet
        {1,0,0} is right, {-1,0,0} is left
        {0,0,-1} is up, {0,0,1} is down
        0.1 for Y is the height off of the page.
            If it was 0, it would be down inside the model of the sheet

Begin editing below:    ]]

--Set this to true while editing and false when you have finished
disableSave = true
--Remember to set this to false once you are done making changes
--Then, after you save & apply it, save your game too

--Color information for input text (r,g,b, values of 0-1)
inputFontColor = {0,0,0}
--Color information for input background
inputColor = {1,1,1}
--Color information for button text (r,g,b, values of 0-1)
buttonFontColor = {0,0,0}
--Color information for button background
buttonColor = {0,0.8,0.8}
--Change scale of button (Avoid changing if possible)
buttonScale = {0.1,0.1,0.1}

--This is the button placement information
  --[[
    The listed properties can be set on a field collection, or individual fields.
    Individual fields may be either an object with those properties or just a position.
    Properties defined on fields override properties defined on the collection.
  ]]
defaultButtonData = {
  --Add checkboxes
  checkbox = {
    --[[
      pos   = the position (pasted from the helper tool)
      size  = height/width/font_size for checkbox
      state = default starting value for checkbox (true=checked, false=not)
      func   = name of function that takes the index from this table, and button index
    ]]
    -- Misc = {
    --   size = 500,
    --   fields = {
    --       Inspiration = {-1.07,0.05,-1.385}
    --   },
    -- },
    --End of checkboxes
  },
  --Add counters that have a + and - button
  counter = {
    --[[
      pos    = the position (pasted from the helper tool)
      size   = height/width/font_size for counter
      value  = default starting value for counter
      hideBG = if background of counter is hidden (true=hidden, false=not)
      min    = minimum allowed value (leave empty for no limit)
      min    = maximum allowed value (leave empty for no limit)
      func   = name of function that takes the index from this table,
                button index, and delta (1 or -1)
    ]]
    -- Level =  {
    --   pos    = {1.404,0.05,-2.02},
    --   size   = 1000,
    --   value  = 1,
    --   hideBG = true,
    --   min    = 1,
    --   max    = 20,
    --   func   = 'changeLevel',
    -- },
    --End of counters
  },
  --Add editable text boxes
  textbox = {
    --[[
      pos       = the position (pasted from the helper tool)
      rows      = how many lines of text you want for this box
      width     = how wide the text box is
      font_size = size of text. This and "rows" effect overall height
      label     = what is shown when there is no text. "" = nothing
      value     = text entered into box. "" = nothing
      alignment = Number to indicate how you want text aligned
                  (1=Automatic, 2=Left, 3=Center, 4=Right, 5=Justified)
      hideBG    = if background of counter is hidden (true=hidden, false=not)
      func      = name of function that takes the index from this table,
                  the value, and whether it is currently selected
    ]]
    Overview = {
      rows      = 1,
      width     = 2250,
      font_size = 400,
      alignment = 2,
      fields = {
        Class = {
          pos       = {0.05,0.05,-1.823},
          label     = "Age",
        },
        Background = {
          pos       = {0.6,0.05,-1.823},
          label     = "Height",
        },
        PlayerName = {
          pos       = {1.15,0.05,-1.823},
          label     = "Weight",
        },
        Race = {
          pos       = {0.05,0.05,-1.683},
          label     = "Eyes",
        },
        Alignment = {
          pos       = {0.6,0.05,-1.683},
          label     = "Skin",
        },
        XP = {
          pos       = {1.15,0.05,-1.683},
          label     = "Hair",
        },
      },
    },
    Backstory = {
      pos       = {-1.02,0.05,0.95},
      rows      = 19,
      width     = 4450,
      font_size = 500,
      label     = "Character Backstory",
      alignment = 2,
    },
    AlliesAndOrganizations = {
      pos       = {0.024,0.05,-0.85},
      rows      = 14,
      width     = 4600,
      font_size = 400,
      label     = "Allies & Organizations",
      alignment = 2,
    },
    SymbolName = {
      pos       = {1.0,0.05,-1.265},
      rows      = 1,
      width     = 3750,
      font_size = 400,
      label     = "Symbol Name",
      alignment = 3,
    },
    FeaturesAndTraits = {
      rows      = 13,
      width     = 4600,
      font_size = 400,
      alignment = 2,
      fields = {
        Column1 = {
          pos       = {0.024,0.05,0.45},
          label     = "Additional Features & Traits",
        },
        Column2 = {1.0,0.05,0.45},
      },
    },
    Treasure = {
      rows      = 9,
      width     = 4600,
      font_size = 400,
      alignment = 2,
      fields = {
        Column1 = {
          pos       = {0.024,0.05,1.52},
          label     = "Treasure",
        },
        Column2 = {1.0,0.05,1.52},
      },
    },
    --End of textboxes
  },
  --Add noneditable labels
  label = {
    --[[
      name      = unique name of the label
      pos       = the position (pasted from the helper tool)
      rows      = how many lines of text you want for this box
      width     = how wide the text box is
      font_size = size of text. This and "rows" effect overall height
      hideBG    = if background of counter is hidden (true=hidden, false=not)
      value     = text shown
    ]]
    Level = {
        pos       = {1.404,0.05,-2.02},
        rows      = 1,
        width     = 1000,
        font_size = 800,
        hideBG    = true
    },
    CharacterName = {
        pos       = {-0.9,0.05,-1.73},
        rows      = 1,
        width     = 4500,
        font_size = 550,
        hideBG    = true
    },
    --End of labels
  },
}

function loadCharacterSheetData()
  local sheetData = {
    checkbox = {},
    counter = {},
    textbox = {},
    label = {},
  }
  for _, s in ipairs(self.getStates()) do
    if s.id < self.getStateId() then
      local json = s.lua_script_state
      if json ~= '' then
        sheetData = JSON.decode(json)
      end
    end
  end

  if sheetData.counter.Level then
    updateLabel(ref_buttonData.label.Level, sheetData.counter.Level.value)
  end

  if sheetData.textbox.CharacterName then
    updateLabel(ref_buttonData.label.CharacterName, sheetData.textbox.CharacterName.value)
  end
end

--Lua beyond this point, I recommend doing something more fun with your life



--Save function
function updateSave()
  saved_data = JSON.encode(ref_buttonData)
  if disableSave==true then saved_data="" end
  self.script_state = saved_data
end

--Startup procedure
function onload(saved_data)
  if disableSave==true then saved_data="" end
  if saved_data ~= "" then
    local loaded_data = JSON.decode(saved_data)
    ref_buttonData = loaded_data
  else
    ref_buttonData = defaultButtonData
  end

  spawnedButtonCount = 0
  createCheckbox()
  createCounter()
  createTextbox()
  createLabel()
  loadCharacterSheetData()
end



--Click functions for buttons


--Checks or unchecks the given box
function click_checkbox(controlData)
  if controlData.state == true then
    controlData.state = false
    self.editButton({ index = controlData.buttonIndex, label = "" })
  else
    controlData.state = true
    self.editButton({ index = controlData.buttonIndex, label = string.char(10008) })
  end
  updateSave()
end

--Applies value to given counter display
function click_counter(controlData, amount)
  controlData.value = controlData.value + amount
  self.editButton({
    index = controlData.buttonIndex,
    label = controlData.value
  })
  updateSave()
end

--Updates saved value for given text box
function click_textbox(controlData, value, selected)
  if selected == false then
    controlData.value = value
    updateSave()
  end
end

--Updates saved value for given label
function updateLabel(controlData, value)
  controlData.value = value
  self.editButton({
    index = controlData.buttonIndex,
    label = value,
  })
  updateSave()
end

--Dud function for if you have a background on a counter
function click_none() end


--Button creation


--Makes checkboxes
function createCheckbox()
  for i, data in pairs(getControlData(ref_buttonData.checkbox, {})) do
    --Sets up reference function
    data.buttonIndex = spawnedButtonCount
    local funcName = "checkbox"..i
    local func = function()
      click_checkbox(data)
      if data.func and _G[data.func] then
        _G[data.func](data)
      end
    end
    self.setVar(funcName, func)
    --Sets up label
    local label = ""
    if data.state == true then label = string.char(10008) end
    --Creates button and counts it
    self.createButton({
      label = label,
      click_function = funcName,
      function_owner = self,
      position = data.pos,
      height = data.size,
      width = data.size,
      font_size = data.size,
      scale = buttonScale,
      color = buttonColor,
      font_color = buttonFontColor
    })
    spawnedButtonCount = spawnedButtonCount + 1
  end
end

--Makes counters
function createCounter()
  for i, data in pairs(getControlData(ref_buttonData.counter, {})) do
    --Sets up display
    data.buttonIndex = spawnedButtonCount
    --Sets up label
    local label = data.value
    --Sets height/width for display
    local size = data.size
    if data.hideBG == true then size = 0 end
    --Creates button and counts it
    self.createButton({
      label = label,
      click_function = "click_none",
      function_owner = self,
      position = data.pos,
      height = size,
      width = size,
      font_size = data.size,
      scale = buttonScale,
      color = buttonColor,
      font_color = buttonFontColor
    })
    spawnedButtonCount = spawnedButtonCount + 1

    --Sets up add 1
    local funcName = "counterAdd"..i
    local func = function()
      if not data.max or data.max >= data.value + 1 then
        click_counter(data, 1)
        if data.func and _G[data.func] then
          _G[data.func](data, 1)
        end
      end
    end
    self.setVar(funcName, func)
    --Sets up label
    local label = "+"
    --Sets up position
    local offsetDistance = (data.size/2 + data.size/4) * (buttonScale[1] * 0.002)
    local pos = {data.pos[1] + offsetDistance, data.pos[2], data.pos[3]}
    --Sets up size
    local size = data.size / 2
    --Creates button and counts it
    self.createButton({
      label = label,
      click_function = funcName,
      function_owner = self,
      position = pos,
      height = size,
      width = size,
      font_size = size,
      scale = buttonScale,
      color = buttonColor,
      font_color = buttonFontColor
    })
    spawnedButtonCount = spawnedButtonCount + 1

    --Sets up subtract 1
    local funcName = "counterSub"..i
    local func = function()
      if not data.min or data.min <= data.value - 1 then
        click_counter(data, -1)
        if data.func and _G[data.func] then
          _G[data.func](data, -1)
        end
      end
    end
    self.setVar(funcName, func)
    --Sets up label
    local label = "-"
    --Set up position
    local pos = {data.pos[1] - offsetDistance, data.pos[2], data.pos[3]}
    --Creates button and counts it
    self.createButton({
      label = label,
      click_function = funcName,
      function_owner = self,
      position = pos,
      height = size,
      width = size,
      font_size = size,
      scale = buttonScale,
      color = buttonColor,
      font_color = buttonFontColor
    })
    spawnedButtonCount = spawnedButtonCount + 1
  end
end

function createTextbox()
  for i, data in pairs(getControlData(ref_buttonData.textbox, {})) do
    --Sets up reference function
    local funcName = "textbox"..i
    local func = function(_,_,val,sel)
      click_textbox(data, val, sel)
      if data.func and _G[data.func] then
        _G[data.func](data, val, sel)
      end
    end
    self.setVar(funcName, func)

    local bgColor = { inputColor[1], inputColor[2], inputColor[3] }
    local fontColor = { inputFontColor[1], inputFontColor[2], inputFontColor[3] }
    if data.hideBG then
      table.insert(bgColor, 0)
      table.insert(fontColor, 255)
    end
    self.createInput({
      input_function = funcName,
      function_owner = self,
      label          = data.label or "",
      alignment      = data.alignment,
      position       = data.pos,
      scale          = buttonScale,
      width          = data.width,
      height         = (data.font_size*data.rows)+24,
      font_size      = data.font_size,
      color          = bgColor,
      font_color     = fontColor,
      value          = data.value or "",
    })
  end
end

function createLabel()
  for i, data in pairs(getControlData(ref_buttonData.label, {})) do
    data.buttonIndex = spawnedButtonCount
    local bgColor = { inputColor[1], inputColor[2], inputColor[3] }
    local fontColor = { inputFontColor[1], inputFontColor[2], inputFontColor[3] }
    if data.hideBG then
      table.insert(bgColor, 0)
      table.insert(fontColor, 255)
    end
    self.createButton({
      click_function = 'noop',
      function_owner = self,
      label          = data.value,
      position       = data.pos,
      scale          = buttonScale,
      width          = data.width,
      height         = (data.font_size*data.rows)+24,
      font_size      = data.font_size,
      color          = bgColor,
      font_color     = fontColor,
    })
    spawnedButtonCount = spawnedButtonCount + 1
  end
end

function getControlData(items, defaultAttrs)
  local controls = {}

  if items ~= nil then
    for key, item in pairs(items) do
      if item.fields ~= nil then
        local children = getControlData(item.fields, item)
        for _, c in pairs(children) do
          table.insert(controls, c)
        end
      else
        local result = {}
        for k, v in pairs(defaultAttrs) do
          if k ~= 'fields' then
            result[k] = v
          end
        end

        if item.pos ~= nil then
          for k, v in pairs(item) do
            result[k] = v
          end
        else
          result.pos = item
        end

        result.name = key
        items[key] = result
        table.insert(controls, result)
      end
    end
  end

  return controls
end

function noop()
end