-- D&D 5e Fillable Character, Details, and Spellcasting Sheet
-- Author: Thor's Hammer
-- Adapted from Character Sheet Template by: MrStump

function onLoad(save_state)
  -- Initialize helper and sheet control object
  sheetHelper = getHelperClient('CHARACTER_SHEET_HELPER')
  sheet = sheetHelper.initializeSheet({
    SheetObj = self,
    SavedData = save_state,
    ControlData = defaultButtonData,
    DisableSave = false,
    ButtonColor = {0,0.8,0.8}
  })
  loadMainSheetData()
end

-- After Initialized function

function loadMainSheetData()
  local mainSheetData = {
    checkbox = {},
    counter = {},
    textbox = {},
    label = {},
  }
  for _, s in ipairs(self.getStates()) do
    if s.name == 'D&D 5e Character Sheet' then
      local json = s.lua_script_state
      if json ~= '' then
        mainSheetData = JSON.decode(json)
      end
    end
  end

  if mainSheetData.counter.Level then
    sheetHelper.updateLabel({
      sheet = sheet,
      value = mainSheetData.counter.Level.value,
      indexer = { 'Level' }
    })
  end

  if mainSheetData.textbox.CharacterName then
    sheetHelper.updateLabel({
      sheet = sheet,
      value = mainSheetData.textbox.CharacterName.value,
      indexer = { 'CharacterName' }
    })
  end
end

--This is the button placement information
  --[[
    The listed properties can be set on a field collection, or individual fields.
    Individual fields may be either an object with those properties or just a position.
    Properties defined on fields override properties defined on the collection.
  ]]
defaultButtonData = {
  --Add checkboxes
  checkbox = {
    --[[
      pos   = the position (pasted from the helper tool)
      size  = height/width/font_size for checkbox
      state = default starting value for checkbox (true=checked, false=not)
      func   = name of function that takes the index from this table, and button index
    ]]
    -- Misc = {
    --   size = 500,
    --   fields = {
    --       Inspiration = {-1.07,0.05,-1.385}
    --   },
    -- },
    --End of checkboxes
  },
  --Add counters that have a + and - button
  counter = {
    --[[
      pos    = the position (pasted from the helper tool)
      size   = height/width/font_size for counter
      value  = default starting value for counter
      hideBG = if background of counter is hidden (true=hidden, false=not)
      min    = minimum allowed value (leave empty for no limit)
      min    = maximum allowed value (leave empty for no limit)
      func   = name of function that takes the index from this table,
                button index, and delta (1 or -1)
    ]]
    -- Level =  {
    --   pos    = {1.404,0.05,-2.02},
    --   size   = 1000,
    --   value  = 1,
    --   hideBG = true,
    --   min    = 1,
    --   max    = 20,
    --   func   = 'changeLevel',
    -- },
    --End of counters
  },
  --Add editable text boxes
  textbox = {
    --[[
      pos       = the position (pasted from the helper tool)
      rows      = how many lines of text you want for this box
      width     = how wide the text box is
      font_size = size of text. This and "rows" effect overall height
      label     = what is shown when there is no text. "" = nothing
      value     = text entered into box. "" = nothing
      alignment = Number to indicate how you want text aligned
                  (1=Automatic, 2=Left, 3=Center, 4=Right, 5=Justified)
      hideBG    = if background of counter is hidden (true=hidden, false=not)
      func      = name of function that takes the index from this table,
                  the value, and whether it is currently selected
    ]]
    Overview = {
      rows      = 1,
      width     = 2250,
      font_size = 400,
      alignment = 2,
      fields = {
        Class = {
          pos       = {0.05,0.05,-1.823},
          label     = "Age",
          sortOrder = 1,
        },
        Background = {
          pos       = {0.6,0.05,-1.823},
          label     = "Height",
          sortOrder = 2,
        },
        PlayerName = {
          pos       = {1.15,0.05,-1.823},
          label     = "Weight",
          sortOrder = 3,
        },
        Race = {
          pos       = {0.05,0.05,-1.683},
          label     = "Eyes",
          sortOrder = 4,
        },
        Alignment = {
          pos       = {0.6,0.05,-1.683},
          label     = "Skin",
          sortOrder = 5,
        },
        XP = {
          pos       = {1.15,0.05,-1.683},
          label     = "Hair",
          sortOrder = 6,
        },
      },
    },
    AlliesAndOrganizations = {
      pos       = {0.024,0.05,-0.85},
      rows      = 14,
      width     = 4600,
      font_size = 400,
      label     = "Allies & Organizations",
      alignment = 2,
      sortOrder = 7,
    },
    SymbolName = {
      pos       = {1.0,0.05,-1.265},
      rows      = 1,
      width     = 3750,
      font_size = 400,
      label     = "Symbol Name",
      alignment = 3,
      sortOrder = 8,
    },
    Backstory = {
      pos       = {-1.02,0.05,0.95},
      rows      = 19,
      width     = 4450,
      font_size = 500,
      label     = "Character Backstory",
      alignment = 2,
      sortOrder = 9,
    },
    FeaturesAndTraits = {
      rows      = 13,
      width     = 4600,
      font_size = 400,
      alignment = 2,
      sortOrder = 10,
      fields = {
        Column1 = {
          pos       = {0.024,0.05,0.45},
          label     = "Additional Features & Traits",
        },
        Column2 = {1.0,0.05,0.45},
      },
    },
    Treasure = {
      rows      = 9,
      width     = 4600,
      font_size = 400,
      alignment = 2,
      sortOrder = 11,
      fields = {
        Column1 = {
          pos       = {0.024,0.05,1.52},
          label     = "Treasure",
        },
        Column2 = {1.0,0.05,1.52},
      },
    },
    --End of textboxes
  },
  --Add noneditable labels
  label = {
    --[[
      name      = unique name of the label
      pos       = the position (pasted from the helper tool)
      rows      = how many lines of text you want for this box
      width     = how wide the text box is
      font_size = size of text. This and "rows" effect overall height
      hideBG    = if background of counter is hidden (true=hidden, false=not)
      value     = text shown
    ]]
    Level = {
        pos       = {1.404,0.05,-2.02},
        rows      = 1,
        width     = 1000,
        font_size = 800,
        hideBG    = true
    },
    CharacterName = {
        pos       = {-0.9,0.05,-1.73},
        rows      = 1,
        width     = 4500,
        font_size = 550,
        hideBG    = true
    },
    --End of labels
  },
}

-- Borrowed from TI4 mod: https://github.com/darrellanderson/TI4-TTS/blob/main/TI4/Helpers/TI4_UnitHelper.ttslua
function getJointedHelperClient(helperObjectName)
  local function getHelperObject()
    for _, joint in ipairs(self.getJoints()) do
      local object = getObjectFromGUID(joint.joint_object_guid)
      if object.getName() == helperObjectName then return object end
    end
    error('missing jointed object "' .. helperObjectName .. '"')
  end
  return getHelperClientByFunc(getHelperObject)
end

function getHelperClient(helperObjectName)
  local function getHelperObject()
    for _, object in ipairs(getAllObjects()) do
      if object.getName() == helperObjectName then return object end
    end
    error('missing object "' .. helperObjectName .. '"')
  end
  return getHelperClientByFunc(getHelperObject)
end

function getHelperClientByFunc(helperObjectFunc)
  -- Nested tables are considered cross script.  Make a local copy.
  local function copyTable(t)
    if t and type(t) == 'table' then
      local copy = {}
      for k, v in pairs(t) do
        copy[k] = type(v) == 'table' and copyTable(v) or v
      end
      t = copy
    end
    return t
  end
  local helperObject = false
  local function getCallWrapper(functionName)
    helperObject = helperObject or helperObjectFunc()
    if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
    return function(parameters) return copyTable(helperObject.call(functionName, parameters)) end
  end
  return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end