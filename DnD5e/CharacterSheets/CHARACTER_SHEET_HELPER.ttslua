-- D&D 5e Fillable Character, Details, and Spellcasting Sheet
-- Author: Thor's Hammer
-- Adapted from Character Sheet Template by: MrStump

sheetControls = {}
sheetData = {}

-- Public functions

--[[
  Creates a sheet data table that can be passed to other functions in this script.
    params (table) - the main parameters collection for this function, containing:
      SheetObj (table) - The token or tile object containing the character sheet
      SavedData (string) - The initial data passed to onload
      ControlData (table) - The control layout for the sheet
      DisableSave (boolean) -
        Set this to true while editing and false when you have finished.
        Remember to set this to false once you are done making changes
        Then, after you save & apply it, save your game too
      InputFontColor (vector) default {0,0,0} - Color information for input text (r,g,b, values of 0-1)
      InputColor (vector) default {1,1,1} - Color information for input background
      ButtonFontColor (vector) default {0,0,0} - Color information for button text (r,g,b, values of 0-1)
      ButtonColor (vector) default {1,1,1} - Color information for button background
      ButtonScale (vector) default {0.1,0.1,0.1} - Change scale of button (Avoid changing if possible)
]]
function initializeSheet(params)
  sheet = {
    Object = params.SheetObj,
    SaveDisabled = params.DisableSave or false,
    InputFontColor = params.InputFontColor or {0,0,0},
    InputColor = params.InputColor or {1,1,1},
    ButtonFontColor = params.ButtonFontColor or {0,0,0},
    ButtonColor = params.ButtonColor or {1,1,1},
    ButtonScale = params.ButtonScale or {0.1,0.1,0.1},
  }

  if sheet.SaveDisabled==true then params.SavedData="" end
  if params.SavedData ~= "" then
    local loaded_data = JSON.decode(params.SavedData)
    sheetData[sheet.Object.getGUID()] = loaded_data
  else
    sheetData[sheet.Object.getGUID()] = {}
  end

  sheetControls[sheet.Object.getGUID()] = params.ControlData

  sheet.SpawnedButtonCount = 0
  _createCheckbox(sheet)
  _createCounter(sheet)
  _createTextbox(sheet)
  _createSelect(sheet)
  _createLabel(sheet)
  return sheet
end

function getControls(sheet)
  return sheetControls[sheet.Object.getGUID()]
end

function getData(sheet)
  return sheetData[sheet.Object.getGUID()]
end

--[[
  Updates displayed and saved value for given label
    params (table)
      sheet (table) - The sheet handler object
      controlData (table) - The control to update
      value (string) - The value to update it to
]]
function updateLabel(params)
  local control = _getByMultiIndex(getControls(params.sheet), 'label', params.indexer)
  local data = _getByMultiIndex(getData(params.sheet), 'label', params.indexer)
  if control ~= nil and control.name ~= nil then
    data.value = params.value
    params.sheet.Object.editButton({
      index = control.buttonIndex,
      label = params.value,
    })
    _updateSave(params.sheet)
  end
end

-- Private functions

function _getByMultiIndex(sheetData, section, indexer)
  if sheetData[section] == nil then
    sheetData[section] = {}
  end
  local curControl = sheetData[section]
  for i, idx in ipairs(indexer) do
    if curControl[idx] == nil then
      curControl[idx] = {}
    end
    curControl = curControl[idx]
  end
  return curControl
end

function _updateSave(sheet)
  local saved_data = JSON.encode(getData(sheet))
  if sheet.SaveDisabled==true then saved_data="" end
  sheet.Object.script_state = saved_data
end

--Click functions for buttons

--Checks or unchecks the given box
function _click_checkbox(sheet, control, data)
  if data.state == true then
    data.state = false
    sheet.Object.editButton({ index = control.buttonIndex, label = "" })
  else
    data.state = true
    sheet.Object.editButton({ index = control.buttonIndex, label = string.char(10008) })
  end
  _updateSave(sheet)
end

--Applies value to given counter display
function _click_counter(sheet, control, data, amount)
  data.value = data.value + amount
  sheet.Object.editButton({
    index = control.buttonIndex,
    label = data.value
  })
  _updateSave(sheet)
end

--Updates saved value for given text box
function _click_textbox(sheet, control, data, value, selected)
  if selected == false then
    data.value = value
    _updateSave(sheet)
  end
end

--Updates saved value for given select control
function _click_select(sheet, control, data)
  local opts = control.options
  local nextIdx = data.index + 1
  if nextIdx > #opts then
    nextIdx = 1
  end
  data.index = nextIdx
  data.value = control.options[data.index]
  sheet.Object.editButton({
    index = control.buttonIndex,
    label = data.value
  })
  _updateSave(sheet)
end

--Dud function for if you have a background on a counter
function _click_none() end


--Button creation


--Makes checkboxes
function _createCheckbox(sheet)
  for i, control in pairs(_getFlattenedControls(getControls(sheet).checkbox)) do
    local data = _getByMultiIndex(getData(sheet), 'checkbox', control.indexer)
    data.state = data.state or control.state

    --Sets up reference function
    control.buttonIndex = sheet.SpawnedButtonCount
    local size = control.size or 100
    local funcName = sheet.Object.getGUID().."_checkbox"..i
    local func = function()
      _click_checkbox(sheet, control, data)
      if control.func then
        sheet.Object.call(control.func, { control = control })
      end
    end
    self.setVar(funcName, func)
    --Sets up label
    local label = ""
    if data.state == true then label = string.char(10008) end
    --Creates button and counts it
    sheet.Object.createButton({
      label = label,
      click_function = funcName,
      function_owner = self,
      position = control.pos,
      height = size,
      width = size,
      font_size = size,
      scale = sheet.ButtonScale,
      color = sheet.ButtonColor,
      font_color = sheet.ButtonFontColor
    })
    sheet.SpawnedButtonCount = sheet.SpawnedButtonCount + 1
  end
end

--Makes counters
function _createCounter(sheet)
  for i, control in pairs(_getFlattenedControls(getControls(sheet).counter)) do
    local data = _getByMultiIndex(getData(sheet), 'counter', control.indexer)
    data.value = data.value or control.value

    --Sets up display
    control.buttonIndex = sheet.SpawnedButtonCount
    --Sets up label
    local label = data.value
    --Sets height/width for display
    local size = control.size or 100
    local btnSize = size
    if control.hideBG == true then btnSize = 0 end
    --Creates button and counts it
    sheet.Object.createButton({
      label = label,
      click_function = "_click_none",
      function_owner = self,
      position = control.pos,
      height = btnSize,
      width = btnSize,
      font_size = size,
      scale = sheet.ButtonScale,
      color = sheet.ButtonColor,
      font_color = sheet.ButtonFontColor
    })
    sheet.SpawnedButtonCount = sheet.SpawnedButtonCount + 1

    --Sets up add 1
    local funcName = sheet.Object.getGUID().."_counterAdd"..i
    local func = function()
      if not control.max or control.max >= data.value + 1 then
        _click_counter(sheet, control, data, 1)
        if control.func then
          sheet.Object.call(control.func, { control = control, data = data, delta = 1 })
        end
      end
    end
    self.setVar(funcName, func)
    --Sets up label
    local label = "+"
    --Sets up position
    local offsetDistance = (size/2 + size/4) * (sheet.ButtonScale[1] * 0.002)
    local pos = {control.pos[1] + offsetDistance, control.pos[2], control.pos[3]}
    --Sets up counter button size
    local cntBtnSize = size / 2
    --Creates button and counts it
    sheet.Object.createButton({
      label = label,
      click_function = funcName,
      function_owner = self,
      position = pos,
      height = cntBtnSize,
      width = cntBtnSize,
      font_size = cntBtnSize,
      scale = sheet.ButtonScale,
      color = sheet.ButtonColor,
      font_color = sheet.ButtonFontColor
    })
    sheet.SpawnedButtonCount = sheet.SpawnedButtonCount + 1

    --Sets up subtract 1
    local funcName = sheet.Object.getGUID().."_counterSub"..i
    local func = function()
      if not control.min or control.min <= data.value - 1 then
        _click_counter(sheet, control, data, -1)
        if control.func then
          sheet.Object.call(control.func, { control = control, data = data, delta = -1 })
        end
      end
    end
    self.setVar(funcName, func)
    --Sets up label
    local label = "-"
    --Set up position
    local pos = {control.pos[1] - offsetDistance, control.pos[2], control.pos[3]}
    --Creates button and counts it
    sheet.Object.createButton({
      label = label,
      click_function = funcName,
      function_owner = self,
      position = pos,
      height = cntBtnSize,
      width = cntBtnSize,
      font_size = cntBtnSize,
      scale = sheet.ButtonScale,
      color = sheet.ButtonColor,
      font_color = sheet.ButtonFontColor
    })
    sheet.SpawnedButtonCount = sheet.SpawnedButtonCount + 1
  end
end

function _createTextbox(sheet)
  local allControls = _getFlattenedControls(getControls(sheet).textbox)
  table.sort(allControls, function(a, b)
    return (a.sortOrder or 0) < (b.sortOrder or 0)
  end)
  for i, control in pairs(allControls) do
    local data = _getByMultiIndex(getData(sheet), 'textbox', control.indexer)
    data.value = data.value or control.value

    --Sets up reference function
    local funcName = sheet.Object.getGUID().."_textbox"..i
    local func = function(_,_,val,sel)
      _click_textbox(sheet, control, data, val, sel)
      if control.func then
        sheet.Object.call(control.func, { control = control, data = data, isSelected = sel })
      end
    end
    self.setVar(funcName, func)

    local bgColor = { sheet.InputColor[1], sheet.InputColor[2], sheet.InputColor[3] }
    local fontColor = { sheet.InputFontColor[1], sheet.InputFontColor[2], sheet.InputFontColor[3] }
    if control.hideBG then
      table.insert(bgColor, 0)
      table.insert(fontColor, 255)
    end
    sheet.Object.createInput({
      input_function = funcName,
      function_owner = self,
      label          = control.label or "",
      alignment      = control.alignment,
      position       = control.pos,
      scale          = sheet.ButtonScale,
      width          = control.width,
      height         = control.height or (control.font_size*control.rows)+24,
      font_size      = control.font_size,
      color          = bgColor,
      font_color     = fontColor,
      value          = data.value or "",
    })
  end
end

function _createSelect(sheet)
  for i, control in pairs(_getFlattenedControls(getControls(sheet).select)) do
    local data = _getByMultiIndex(getData(sheet), 'select', control.indexer)
    data.index = data.index or control.index

    control.buttonIndex = sheet.SpawnedButtonCount
    --Defaults current shown value to placeholder if nothing selected
    local label = control.options[data.index]
    if data.index == nil then
      data.index = 0
    end
    if data.index == 0 then
      label = control.label or 'Click to Select'
    end
    --Sets up reference function
    local funcName = sheet.Object.getGUID().."_select"..i
    local func = function(_,_,val)
      _click_select(sheet, control, data)
      if control.func then
        sheet.Object.call(control.func, { control = control, data = data })
      end
    end
    self.setVar(funcName, func)

    local bgColor = { sheet.ButtonColor[1], sheet.ButtonColor[2], sheet.ButtonColor[3] }
    local fontColor = { sheet.ButtonFontColor[1], sheet.ButtonFontColor[2], sheet.ButtonFontColor[3] }
    if control.hideBG then
      table.insert(bgColor, 0)
      table.insert(fontColor, 255)
    end
    --Creates button and counts it
    sheet.Object.createButton({
      click_function = funcName,
      function_owner = self,
      label          = label,
      position       = control.pos,
      scale          = sheet.ButtonScale,
      width          = control.width,
      height         = control.font_size+24,
      font_size      = control.font_size,
      color          = bgColor,
      font_color     = fontColor,
    })
    sheet.SpawnedButtonCount = sheet.SpawnedButtonCount + 1
  end
end

function _createLabel(sheet)
  for i, control in pairs(_getFlattenedControls(getControls(sheet).label)) do
    local data = _getByMultiIndex(getData(sheet), 'label', control.indexer)
    data.value = data.value or control.value

    control.buttonIndex = sheet.SpawnedButtonCount
    local bgColor = { sheet.InputColor[1], sheet.InputColor[2], sheet.InputColor[3] }
    local fontColor = { sheet.InputFontColor[1], sheet.InputFontColor[2], sheet.InputFontColor[3] }
    if control.hideBG then
      table.insert(bgColor, 0)
      table.insert(fontColor, 255)
    end
    --Creates button and counts it
    sheet.Object.createButton({
      click_function = '_click_none',
      function_owner = self,
      label          = data.value,
      position       = control.pos,
      scale          = sheet.ButtonScale,
      width          = control.width,
      height         = (control.font_size*control.rows)+24,
      font_size      = control.font_size,
      color          = bgColor,
      font_color     = fontColor,
    })
    sheet.SpawnedButtonCount = sheet.SpawnedButtonCount + 1
  end
end

-- helpers

function _getFlattenedControls(items, indexer, defaultAttrs)
  local controls = {}
  if indexer == nil then indexer = {} end
  if defaultAttrs == nil then defaultAttrs = {} end

  if items ~= nil then
    for key, item in pairs(items) do
      local idxer = {}
      for k, v in ipairs(indexer) do
        idxer[k] = v
      end
      table.insert(idxer, key)
      if item.fields ~= nil then
        table.insert(idxer, 'fields')
        local children = _getFlattenedControls(item.fields, idxer, item)
        for _, c in pairs(children) do
          table.insert(controls, c)
        end
      else
        local result = {}
        for k, v in pairs(defaultAttrs) do
          if k ~= 'fields' then
            result[k] = v
          end
        end

        if item.pos ~= nil then
          for k, v in pairs(item) do
            result[k] = v
          end
        else
          result.pos = item
        end

        result.name = key
        items[key] = result
        result.indexer = idxer
        table.insert(controls, result)
      end
    end
  end

  return controls
end