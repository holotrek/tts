-- D&D 5e Fillable Character, Details, and Spellcasting Sheet
-- Author: Thor's Hammer
-- Adapted from Character Sheet Template by: MrStump

function onLoad(save_state)
  -- Initialize helper and sheet control object
  sheetHelper = getHelperClient('CHARACTER_SHEET_HELPER')
  sheet = sheetHelper.initializeSheet({
    SheetObj = self,
    SavedData = save_state,
    ControlData = defaultButtonData,
    DisableSave = false,
    ButtonColor = {0,0.8,0.8}
  })
  loadMainSheetData()
end

-- Global vars

classAbilityMap = {
  Barbarian = 'None',
  Bard = 'Charisma',
  Cleric = 'Wisdom',
  Druid = 'Wisdom',
  Fighter = 'Intelligence',
  Monk = 'Wisdom',
  Paladin = 'Charisma',
  Ranger = 'Wisdom',
  Rogue = 'Intelligence',
  Sorceror = 'Charisma',
  Warlock = 'Charisma',
  Wizard = 'Intelligence'
}

-- After Initialized function

function loadMainSheetData()
  local mainSheetData = {
    checkbox = {},
    counter = {},
    textbox = {},
    label = {},
  }
  for _, s in ipairs(self.getStates()) do
    if s.name == 'D&D 5e Character Sheet' then
      local json = s.lua_script_state
      if json ~= '' then
        mainSheetData = JSON.decode(json)
      end
    end
  end

  if mainSheetData.counter.Level then
    sheetHelper.updateLabel({
      sheet = sheet,
      value = mainSheetData.counter.Level.value,
      indexer = { 'Level' }
    })
  end

  if mainSheetData.textbox.Overview and mainSheetData.textbox.Overview.fields.Class then
    local class = mainSheetData.textbox.Overview.fields.Class.value
    local abilityMod = classAbilityMap[class] or 'None'
    sheetHelper.updateLabel({
      sheet = sheet,
      value = class,
      indexer = { 'Class' }
    })
    sheetHelper.updateLabel({
      sheet = sheet,
      value = abilityMod,
      indexer = { 'Spellcasting', 'fields', 'Ability' }
    })

    local attackBonus = mainSheetData.counter.ProficiencyBonus.value
    if abilityMod ~= 'None' then
      local modType = string.sub(abilityMod, 1, 3)
      local mod = mainSheetData.label.AbilityModifiers.fields[modType..'AbilityMod']
      if mod ~= nil then
        attackBonus = attackBonus + mod.value
      end
    end
    sheetHelper.updateLabel({
      sheet = sheet,
      value = 8 + attackBonus,
      indexer = { 'Spellcasting', 'fields', 'SaveDC' }
    })
    sheetHelper.updateLabel({
      sheet = sheet,
      value = attackBonus,
      indexer = { 'Spellcasting', 'fields', 'AttackBonus' }
    })

    if classAbilityMap[class] == nil then
      local name = mainSheetData.textbox.CharacterName.value
      local classList = ''
      local j = 1
      for i, _ in pairs(classAbilityMap) do
        if j < 12 then
          classList = classList..i..', '
        else
          classList = classList..' or '..i
        end
        j = j + 1
      end
      printToAll('[ffaa00]Warning: [ffffff]Spellcasting sheet for '..name..' has invalid class: [ff0000]'..class..'[ffffff]. Must be one of the following with correct capitalization and spelling: [00cc00]'..classList)
    end
  end
end

--This is the button placement information
  --[[
    The listed properties can be set on a field collection, or individual fields.
    Individual fields may be either an object with those properties or just a position.
    Properties defined on fields override properties defined on the collection.
  ]]
defaultButtonData = {
  --Add checkboxes
  checkbox = {
    --[[
      pos   = the position (pasted from the helper tool)
      size  = height/width/font_size for checkbox
      state = default starting value for checkbox (true=checked, false=not)
      func   = name of function that takes the index from this table, and button index
    ]]
    SpellsPrepared = {
      size = 300,
      fields = {
        --Level1
        {-1.46,0.05,-0.240},
        {-1.46,0.05,-0.164},
        {-1.46,0.05,-0.088},
        {-1.46,0.05,-0.012},
        {-1.46,0.05,0.064},
        {-1.46,0.05,0.140},
        {-1.46,0.05,0.216},
        {-1.46,0.05,0.292},
        {-1.46,0.05,0.368},
        {-1.46,0.05,0.444},
        {-1.46,0.05,0.520},
        {-1.46,0.05,0.596},
        {-1.46,0.05,0.672},
        --Level2
        {-1.46,0.05,0.987},
        {-1.46,0.05,1.063},
        {-1.46,0.05,1.139},
        {-1.46,0.05,1.215},
        {-1.46,0.05,1.291},
        {-1.46,0.05,1.367},
        {-1.46,0.05,1.443},
        {-1.46,0.05,1.519},
        {-1.46,0.05,1.595},
        {-1.46,0.05,1.671},
        {-1.46,0.05,1.747},
        {-1.46,0.05,1.823},
        {-1.46,0.05,1.899},
        --Level3
        {-0.44,0.05,-1.158},
        {-0.44,0.05,-1.082},
        {-0.44,0.05,-1.006},
        {-0.44,0.05,-0.930},
        {-0.44,0.05,-0.854},
        {-0.44,0.05,-0.778},
        {-0.44,0.05,-0.702},
        {-0.44,0.05,-0.626},
        {-0.44,0.05,-0.550},
        {-0.44,0.05,-0.474},
        {-0.44,0.05,-0.398},
        {-0.44,0.05,-0.322},
        {-0.44,0.05,-0.246},
        --Level4
        {-0.44,0.05,0.064},
        {-0.44,0.05,0.140},
        {-0.44,0.05,0.216},
        {-0.44,0.05,0.292},
        {-0.44,0.05,0.368},
        {-0.44,0.05,0.444},
        {-0.44,0.05,0.520},
        {-0.44,0.05,0.596},
        {-0.44,0.05,0.672},
        {-0.44,0.05,0.748},
        {-0.44,0.05,0.824},
        {-0.44,0.05,0.900},
        {-0.44,0.05,0.976},
        --Level5
        {-0.44,0.05,1.291},
        {-0.44,0.05,1.367},
        {-0.44,0.05,1.443},
        {-0.44,0.05,1.519},
        {-0.44,0.05,1.595},
        {-0.44,0.05,1.671},
        {-0.44,0.05,1.747},
        {-0.44,0.05,1.823},
        {-0.44,0.05,1.899},
        --Level6
        {0.57,0.05,-1.158},
        {0.57,0.05,-1.082},
        {0.57,0.05,-1.006},
        {0.57,0.05,-0.930},
        {0.57,0.05,-0.854},
        {0.57,0.05,-0.778},
        {0.57,0.05,-0.702},
        {0.57,0.05,-0.626},
        {0.57,0.05,-0.550},
        --Level7
        {0.57,0.05,-0.246},
        {0.57,0.05,-0.164},
        {0.57,0.05,-0.088},
        {0.57,0.05,-0.012},
        {0.57,0.05,0.064},
        {0.57,0.05,0.140},
        {0.57,0.05,0.216},
        {0.57,0.05,0.292},
        {0.57,0.05,0.368},
        --Level8
        {0.57,0.05,0.672},
        {0.57,0.05,0.748},
        {0.57,0.05,0.824},
        {0.57,0.05,0.900},
        {0.57,0.05,0.976},
        {0.57,0.05,1.063},
        {0.57,0.05,1.139},
        --Level9
        {0.57,0.05,1.443},
        {0.57,0.05,1.519},
        {0.57,0.05,1.595},
        {0.57,0.05,1.671},
        {0.57,0.05,1.747},
        {0.57,0.05,1.823},
        {0.57,0.05,1.899},
      },
    },
    --End of checkboxes
  },
  --Add counters that have a + and - button
  counter = {
    --[[
      pos    = the position (pasted from the helper tool)
      size   = height/width/font_size for counter
      value  = default starting value for counter
      hideBG = if background of counter is hidden (true=hidden, false=not)
      min    = minimum allowed value (leave empty for no limit)
      min    = maximum allowed value (leave empty for no limit)
      func   = name of function that takes the index from this table,
                button index, and delta (1 or -1)
    ]]
    SpellSlots = {
      size = 550,
      value = 0,
      hideBG = false,
      min = 0,
      alignment = 3,
      fields = {
        Total1 = {-1.27,0.05,-0.39},
        Expended1 = {-0.85,0.05,-0.39},
        Total2 = {-1.27,0.05,0.845},
        Expended2 = {-0.85,0.05,0.845},
        Total3 = {-0.25,0.05,-1.295},
        Expended3 = {0.17,0.05,-1.295},
        Total4 = {-0.25,0.05,-0.075},
        Expended4 = {0.17,0.05,-0.075},
        Total5 = {-0.25,0.05,1.145},
        Expended5 = {0.17,0.05,1.145},
        Total6 = {0.76,0.05,-1.295},
        Expended6 = {1.18,0.05,-1.295},
        Total7 = {0.76,0.05,-0.38},
        Expended7 = {1.18,0.05,-0.38},
        Total8 = {0.76,0.05,0.54},
        Expended8 = {1.18,0.05,0.54},
        Total9 = {0.76,0.05,1.297},
        Expended9 = {1.18,0.05,1.297},
      },
    },
    --End of counters
  },
  --Add editable text boxes
  textbox = {
    --[[
      pos       = the position (pasted from the helper tool)
      rows      = how many lines of text you want for this box
      width     = how wide the text box is
      font_size = size of text. This and "rows" effect overall height
      label     = what is shown when there is no text. "" = nothing
      value     = text entered into box. "" = nothing
      alignment = Number to indicate how you want text aligned
                  (1=Automatic, 2=Left, 3=Center, 4=Right, 5=Justified)
      hideBG    = if background of counter is hidden (true=hidden, false=not)
      func      = name of function that takes the index from this table,
                  the value, and whether it is currently selected
    ]]
    Cantrips = {
      rows      = 1,
      width     = 4450,
      font_size = 300,
      alignment = 2,
      fields = {
        {-1.01,0.05,-1.176},
        {-1.01,0.05,-1.100},
        {-1.01,0.05,-1.024},
        {-1.01,0.05,-0.948},
        {-1.01,0.05,-0.872},
        {-1.01,0.05,-0.796},
        {-1.01,0.05,-0.720},
        {-1.01,0.05,-0.644},
      }
    },
    Spells = {
      rows      = 1,
      width     = 4100,
      font_size = 300,
      alignment = 2,
      fields = {
        --Level1
        {-0.98,0.05,-0.258},
        {-0.98,0.05,-0.182},
        {-0.98,0.05,-0.106},
        {-0.98,0.05,-0.030},
        {-0.98,0.05,0.046},
        {-0.98,0.05,0.122},
        {-0.98,0.05,0.198},
        {-0.98,0.05,0.274},
        {-0.98,0.05,0.350},
        {-0.98,0.05,0.426},
        {-0.98,0.05,0.502},
        {-0.98,0.05,0.578},
        {-0.98,0.05,0.654},
        --Level2
        {-0.98,0.05,0.969},
        {-0.98,0.05,1.045},
        {-0.98,0.05,1.121},
        {-0.98,0.05,1.197},
        {-0.98,0.05,1.273},
        {-0.98,0.05,1.349},
        {-0.98,0.05,1.425},
        {-0.98,0.05,1.501},
        {-0.98,0.05,1.577},
        {-0.98,0.05,1.653},
        {-0.98,0.05,1.729},
        {-0.98,0.05,1.805},
        {-0.98,0.05,1.881},
        --Level3
        {0.04,0.05,-1.176},
        {0.04,0.05,-1.100},
        {0.04,0.05,-1.024},
        {0.04,0.05,-0.948},
        {0.04,0.05,-0.872},
        {0.04,0.05,-0.796},
        {0.04,0.05,-0.720},
        {0.04,0.05,-0.644},
        {0.04,0.05,-0.568},
        {0.04,0.05,-0.492},
        {0.04,0.05,-0.416},
        {0.04,0.05,-0.340},
        {0.04,0.05,-0.264},
        --Level4
        {0.04,0.05,0.046},
        {0.04,0.05,0.122},
        {0.04,0.05,0.198},
        {0.04,0.05,0.274},
        {0.04,0.05,0.350},
        {0.04,0.05,0.426},
        {0.04,0.05,0.502},
        {0.04,0.05,0.578},
        {0.04,0.05,0.654},
        {0.04,0.05,0.730},
        {0.04,0.05,0.806},
        {0.04,0.05,0.882},
        {0.04,0.05,0.958},
        --Level5
        {0.04,0.05,1.273},
        {0.04,0.05,1.349},
        {0.04,0.05,1.425},
        {0.04,0.05,1.501},
        {0.04,0.05,1.577},
        {0.04,0.05,1.653},
        {0.04,0.05,1.729},
        {0.04,0.05,1.805},
        {0.04,0.05,1.881},
        --Level6
        {1.05,0.05,-1.176},
        {1.05,0.05,-1.100},
        {1.05,0.05,-1.024},
        {1.05,0.05,-0.948},
        {1.05,0.05,-0.872},
        {1.05,0.05,-0.796},
        {1.05,0.05,-0.720},
        {1.05,0.05,-0.644},
        {1.05,0.05,-0.568},
        --Level7
        {1.05,0.05,-0.258},
        {1.05,0.05,-0.182},
        {1.05,0.05,-0.106},
        {1.05,0.05,-0.030},
        {1.05,0.05,0.046},
        {1.05,0.05,0.122},
        {1.05,0.05,0.198},
        {1.05,0.05,0.274},
        {1.05,0.05,0.350},
        --Level8
        {1.05,0.05,0.654},
        {1.05,0.05,0.730},
        {1.05,0.05,0.806},
        {1.05,0.05,0.882},
        {1.05,0.05,0.958},
        {1.05,0.05,1.045},
        {1.05,0.05,1.121},
        --Level9
        {1.05,0.05,1.425},
        {1.05,0.05,1.501},
        {1.05,0.05,1.577},
        {1.05,0.05,1.653},
        {1.05,0.05,1.729},
        {1.05,0.05,1.805},
        {1.05,0.05,1.881},
      },
    },
    --End of textboxes
  },
  --Add noneditable labels
  label = {
    --[[
      name      = unique name of the label
      pos       = the position (pasted from the helper tool)
      rows      = how many lines of text you want for this box
      width     = how wide the text box is
      font_size = size of text. This and "rows" effect overall height
      hideBG    = if background of counter is hidden (true=hidden, false=not)
      value     = text shown
    ]]
    Level = {
      pos       = {1.404,0.05,-2.02},
      rows      = 1,
      width     = 1000,
      font_size = 800,
      hideBG    = true
    },
    Class = {
      pos       = {-0.9,0.05,-1.73},
      rows      = 1,
      width     = 4500,
      font_size = 550,
      hideBG    = true
    },
    Spellcasting = {
      rows      = 1,
      width     = 1000,
      font_size = 800,
      hideBG    = true,
      fields = {
        Ability = {
          pos       = {0.055,0.05,-1.77},
          width     = 2000,
          font_size = 350,
        },
        SaveDC = {0.6,0.05,-1.77},
        AttackBonus = {1.15,0.05,-1.77}
      },
    },
    --End of labels
  },
}

-- Borrowed from TI4 mod: https://github.com/darrellanderson/TI4-TTS/blob/main/TI4/Helpers/TI4_UnitHelper.ttslua
function getJointedHelperClient(helperObjectName)
  local function getHelperObject()
    for _, joint in ipairs(self.getJoints()) do
      local object = getObjectFromGUID(joint.joint_object_guid)
      if object.getName() == helperObjectName then return object end
    end
    error('missing jointed object "' .. helperObjectName .. '"')
  end
  return getHelperClientByFunc(getHelperObject)
end

function getHelperClient(helperObjectName)
  local function getHelperObject()
    for _, object in ipairs(getAllObjects()) do
      if object.getName() == helperObjectName then return object end
    end
    error('missing object "' .. helperObjectName .. '"')
  end
  return getHelperClientByFunc(getHelperObject)
end

function getHelperClientByFunc(helperObjectFunc)
  -- Nested tables are considered cross script.  Make a local copy.
  local function copyTable(t)
    if t and type(t) == 'table' then
      local copy = {}
      for k, v in pairs(t) do
        copy[k] = type(v) == 'table' and copyTable(v) or v
      end
      t = copy
    end
    return t
  end
  local helperObject = false
  local function getCallWrapper(functionName)
    helperObject = helperObject or helperObjectFunc()
    if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
    return function(parameters) return copyTable(helperObject.call(functionName, parameters)) end
  end
  return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end