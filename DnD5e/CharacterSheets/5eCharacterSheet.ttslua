-- D&D 5e Fillable Character, Details, and Spellcasting Sheet
-- Author: Thor's Hammer
-- Adapted from Character Sheet Template by: MrStump

function onLoad(save_state)
  -- Initialize helper and sheet control object
  sheetHelper = getHelperClient('CHARACTER_SHEET_HELPER')
  sheet = sheetHelper.initializeSheet({
    SheetObj = self,
    SavedData = save_state,
    ControlData = defaultButtonData,
    DisableSave = false,
    ButtonColor = {0,0.8,0.8}
  })
end

-- Global vars

skillThrowModMap = {
  StrSavingThrow = 'Str',
  DexSavingThrow = 'Dex',
  ConSavingThrow = 'Con',
  IntSavingThrow = 'Int',
  WisSavingThrow = 'Wis',
  ChaSavingThrow = 'Cha',
  Athletics = 'Str',
  Acrobatics = 'Dex',
  SleightOfHand = 'Dex',
  Stealth = 'Dex',
  Arcana = 'Int',
  History = 'Int',
  Investigation = 'Int',
  Nature = 'Int',
  Religion = 'Int',
  AnimalHandling = 'Wis',
  Insight = 'Wis',
  Medicine = 'Wis',
  Perception = 'Wis',
  Survival = 'Wis',
  Deception = 'Cha',
  Intimidation = 'Cha',
  Performance = 'Cha',
  Persuasion = 'Cha',
}

-- Callback functions

function changeLevel(params)
  sheetHelper.updateLabel({
    sheet = sheet,
    value = params.data.value,
    indexer = { 'HitDiceTotal' }
  })
end

function changeModifier(params)
  local newVal = params.data.value
  local modType = params.data.name
  local mod = math.floor((newVal - 10) / 2)
  sheetHelper.updateLabel({
    sheet = sheet,
    value = (mod >= 0 and '+' or '')..mod,
    indexer = { 'AbilityModifiers', 'fields', modType..'AbilityMod' }
  })
  adjustSavingThrowsAndSkills(modType, mod)
end

function toggleProficiency(params)
  local stat = string.gsub(params.data.name, 'Prof', '')
  adjustSavingThrowOrSkill(stat)
end

function changeProficiencyBonus(params)
  adjustAllSavingThrowsAndSkills()
end

-- Other helper functions

function adjustAllSavingThrowsAndSkills()
  for stat, m in pairs(skillThrowModMap) do
    adjustSavingThrowOrSkill(stat)
  end
end

function adjustSavingThrowsAndSkills(modType)
  for stat, m in pairs(skillThrowModMap) do
    if m == modType then
      adjustSavingThrowOrSkill(stat)
    end
  end
end

function adjustSavingThrowOrSkill(stat)
  local sheetData = sheetHelper.getData(sheet)
  local modType = skillThrowModMap[stat]
  local mod = sheetData.label.AbilityModifiers.fields[modType..'AbilityMod']
  local profActive = sheetData.checkbox.Proficiencies.fields[stat].state
  local profVal = sheetData.counter.ProficiencyBonus.value
  local val = tonumber(mod.value) + (profActive and profVal or 0)
  sheetHelper.updateLabel({
    sheet = sheet,
    value = (val >= 0 and '+' or '')..val,
    indexer = { 'SavingThrowsAndSkills', 'fields', stat }
  })
  sheetHelper.updateLabel({
    sheet = sheet,
    value = 10 + tonumber(val),
    indexer = { 'PassiveSkills', 'fields', stat }
  })
end

--This is the button placement information
  --[[
    The listed properties can be set on a field collection, or individual fields.
    Individual fields may be either an object with those properties or just a position.
    Properties defined on fields override properties defined on the collection.
  ]]
defaultButtonData = {
  --Add checkboxes
  checkbox = {
    --[[
      pos   = the position (pasted from the helper tool)
      size  = height/width/font_size for checkbox
      state = default starting value for checkbox (true=checked, false=not)
      func   = name of function that takes the index from this table, and button index
    ]]
    Misc = {
      size = 500,
      fields = {
          Inspiration = {-1.07,0.05,-1.385}
      },
    },
    Proficiencies = {
      size = 300,
      func = 'toggleProficiency',
      fields = {
        StrSavingThrow = {-1.09,0.05,-0.994},
        DexSavingThrow = {-1.09,0.05,-0.921},
        ConSavingThrow = {-1.09,0.05,-0.848},
        IntSavingThrow = {-1.09,0.05,-0.775},
        WisSavingThrow = {-1.09,0.05,-0.702},
        ChaSavingThrow = {-1.09,0.05,-0.629},
        Acrobatics = {-1.09,0.05,-0.374},
        AnimalHandling = {-1.09,0.05,-0.301},
        Arcana = {-1.09,0.05,-0.228},
        Athletics = {-1.09,0.05,-0.155},
        Deception = {-1.09,0.05,-0.082},
        History = {-1.09,0.05,-0.009},
        Insight = {-1.09,0.05,0.064},
        Intimidation = {-1.09,0.05,0.137},
        Investigation = {-1.09,0.05,0.210},
        Medicine = {-1.09,0.05,0.283},
        Nature = {-1.09,0.05,0.356},
        Perception = {-1.09,0.05,0.429},
        Performance = {-1.09,0.05,0.502},
        Persuasion = {-1.09,0.05,0.575},
        Religion = {-1.09,0.05,0.648},
        SleightOfHand = {-1.09,0.05,0.721},
        Stealth = {-1.09,0.05,0.794},
        Survival = {-1.09,0.05,0.867},
      },
    },
    DeathSaves = {
      size = 300,
      fields = {
        Success1 = {0.238,0.05,-0.375},
        Success2 = {0.310,0.05,-0.375},
        Success3 = {0.382,0.05,-0.375},
        Failure1 = {0.238,0.05,-0.296},
        Failure2 = {0.310,0.05,-0.296},
        Failure3 = {0.382,0.05,-0.296},
      },
    },
    --End of checkboxes
  },
  --Add counters that have a + and - button
  counter = {
    --[[
      pos    = the position (pasted from the helper tool)
      size   = height/width/font_size for counter
      value  = default starting value for counter
      hideBG = if background of counter is hidden (true=hidden, false=not)
      min    = minimum allowed value (leave empty for no limit)
      min    = maximum allowed value (leave empty for no limit)
      func   = name of function that takes the index from this table,
                button index, and delta (1 or -1)
    ]]
    Level =  {
      pos    = {1.404,0.05,-2.02},
      size   = 1000,
      value  = 1,
      hideBG = true,
      min    = 1,
      max    = 20,
      func   = 'changeLevel',
    },
    ProficiencyBonus = {
      pos    = {-1.064,0.05,-1.18},
      size   = 650,
      value  = 2,
      hideBG = true,
      min    = 2,
      max    = 6,
      func   = 'changeProficiencyBonus',
    },
    Abilities = {
      size   = 500,
      value  = 10,
      hideBG = true,
      min    = 1,
      max    = 30,
      func   = 'changeModifier',
      fields = {
        Str = {-1.34,0.05,-1.09},
        Dex = {-1.34,0.05,-0.705},
        Con = {-1.34,0.05,-0.320},
        Int = {-1.34,0.05,0.065},
        Wis = {-1.34,0.05,0.45},
        Cha = {-1.34,0.05,0.835},
      },
    },
    --End of counters
  },
  --Add editable text boxes
  textbox = {
    --[[
      pos       = the position (pasted from the helper tool)
      rows      = how many lines of text you want for this box
      width     = how wide the text box is
      font_size = size of text. This and "rows" effect overall height
      label     = what is shown when there is no text. "" = nothing
      value     = text entered into box. "" = nothing
      alignment = Number to indicate how you want text aligned
                  (1=Automatic, 2=Left, 3=Center, 4=Right, 5=Justified)
      hideBG    = if background of counter is hidden (true=hidden, false=not)
      sortOrder = the order in which you want the textboxes to be tabbed to
      func      = name of function that takes the index from this table,
                  the value, and whether it is currently selected
    ]]
    CharacterName = {
      pos       = {-0.9,0.05,-1.75},
      rows      = 1,
      width     = 4500,
      font_size = 550,
      label     = "Character Name",
      alignment = 3,
      sortOrder = 1,
    },
    Overview = {
      rows      = 1,
      width     = 2250,
      font_size = 400,
      alignment = 2,
      fields = {
        Class = {
          pos       = {0.05,0.05,-1.84},
          label     = "Class",
          sortOrder = 2,
        },
        Background = {
          pos       = {0.6,0.05,-1.84},
          label     = "Background",
          sortOrder = 3,
        },
        PlayerName = {
          pos       = {1.15,0.05,-1.84},
          label     = "Player Name",
          sortOrder = 4,
        },
        Race = {
          pos       = {0.05,0.05,-1.7},
          label     = "Race",
          sortOrder = 5,
        },
        Alignment = {
          pos       = {0.6,0.05,-1.7},
          label     = "Alignment",
          sortOrder = 6,
        },
        XP = {
          pos       = {1.15,0.05,-1.7},
          label     = "XP",
          sortOrder = 7,
        },
      },
    },
    Stats = {
      fields = {
        AC = {
          pos       = {-0.315,0.05,-1.3},
          rows      = 1,
          width     = 775,
          font_size = 625,
          label     = "AC",
          alignment = 3,
          sortOrder = 8,
        },
        Initiative = {
          pos       = {-0.017,0.05,-1.3},
          rows      = 1,
          width     = 950,
          font_size = 625,
          label     = "Init",
          alignment = 3,
          sortOrder = 9,
        },
        Speed = {
          pos       = {0.300,0.05,-1.3},
          rows      = 1,
          width     = 1000,
          font_size = 500,
          label     = "Spd",
          alignment = 3,
          sortOrder = 10,
        },
      }
    },
    HP = {
      rows      = 1,
      width     = 2000,
      font_size = 500,
      alignment = 3,
      fields = {
        MaxHP = {
          pos       = {0.14,0.05,-1.045},
          font_size = 400,
          label     = "Max HP",
          sortOrder = 11,
        },
        CurrentHP = {
          pos       = {0.0,0.05,-0.9},
          label     = "Cur HP",
          sortOrder = 12,
        },
        TemporaryHP = {
          pos       = {0.0,0.05,-0.625},
          label     = "Temp HP",
          sortOrder = 13,
        },
      },
    },
    HitDice = {
      pos       = {-0.235,0.05,-0.295},
      rows      = 1,
      width     = 1500,
      font_size = 400,
      label     = "Cur Dice",
      alignment = 3,
      sortOrder = 14,
    },
    Attacks = {
      rows      = 1,
      width     = 1700,
      font_size = 400,
      alignment = 3,
      fields = {
        Attack1 = {
          pos = {-0.276,0.05,0.023},
          label = "Weapon1",
          sortOrder = 15,
        },
        Attack2 = {
          pos = {-0.276,0.05,0.133},
          sortOrder = 18,
        },
        Attack3 = {
          pos = {-0.276,0.05,0.243},
          sortOrder = 21,
        },
      },
    },
    AttackBonuses = {
      rows      = 1,
      width     = 800,
      font_size = 400,
      alignment = 3,
      fields = {
        AttackBonus1 = {
          pos = {0.005,0.05,0.023},
          label = "+0",
          sortOrder = 16,
        },
        AttackBonus2 = {
          pos = {0.005,0.05,0.133},
          sortOrder = 19,
        },
        AttackBonus3 = {
          pos = {0.005,0.05,0.243},
          sortOrder = 22,
        },
      },
    },
    AttackDamages = {
      rows      = 1,
      width     = 1600,
      font_size = 400,
      alignment = 3,
      fields = {
        AttackDamage1 = {
          pos = {0.280,0.05,0.023},
          label = "1d8 + 1",
          sortOrder = 17,
        },
        AttackDamage2 = {
          pos = {0.280,0.05,0.133},
          sortOrder = 20,
        },
        AttackDamage3 = {
          pos = {0.280,0.05,0.243},
          sortOrder = 23,
        },
      },
    },
    OtherAttacks = {
      pos       = {0.0,0.05,0.62},
      rows      = 6,
      width     = 4500,
      font_size = 500,
      alignment = 2,
      sortOrder = 24,
    },
    OtherProficienciesAndLanguages = {
      pos       = {-1.02,0.05,1.59},
      rows      = 6,
      width     = 4450,
      font_size = 550,
      alignment = 2,
      sortOrder = 25,
    },
    Equipment = {
      rows      = 1,
      width     = 750,
      font_size = 450,
      alignment = 3,
      fields = {
        Copper = {
          pos       = {-0.335,0.05,1.14},
          label     = "CP",
          sortOrder = 26,
        },
        Silver = {
          pos       = {-0.335,0.05,1.28},
          label     = "SP",
          sortOrder = 27,
        },
        Electrum = {
          pos       = {-0.335,0.05,1.42},
          label     = "EP",
          sortOrder = 28,
        },
        Gold = {
          pos       = {-0.335,0.05,1.56},
          label     = "GP",
          sortOrder = 29,
        },
        Platinum = {
          pos       = {-0.335,0.05,1.70},
          label     = "PP",
          sortOrder = 30,
        },
        Other = {
          pos       = {0.13,0.05,1.5},
          rows      = 9,
          width     = 3250,
          alignment = 2,
          sortOrder = 31,
        }
      },
    },
    Personality = {
      rows      = 4,
      width     = 4000,
      font_size = 250,
      alignment = 2,
      sortOrder = 32,
      fields = {
        {1.02,0.05,-1.26},
        {1.02,0.05,-0.92},
        {1.02,0.05,-0.62},
        {1.02,0.05,-0.32},
      },
    },
    FeaturesAndTraits = {
      pos       = {1.02,0.05,0.95},
      rows      = 19,
      width     = 4500,
      font_size = 500,
      alignment = 2,
      sortOrder = 33,
    },
    --End of textboxes
  },
  --Add noneditable labels
  label = {
    --[[
      name      = unique name of the label
      pos       = the position (pasted from the helper tool)
      rows      = how many lines of text you want for this box
      width     = how wide the text box is
      font_size = size of text. This and "rows" effect overall height
      hideBG    = if background of counter is hidden (true=hidden, false=not)
      value     = text shown
    ]]
    AbilityModifiers = {
      rows      = 1,
      width     = 1000,
      font_size = 800,
      value     = "+0",
      hideBG    = true,
      fields = {
        StrAbilityMod = {-1.35,0.05,-1.22},
        DexAbilityMod = {-1.35,0.05,-0.835},
        ConAbilityMod = {-1.35,0.05,-0.45},
        IntAbilityMod = {-1.35,0.05,-0.065},
        WisAbilityMod = {-1.35,0.05,0.32},
        ChaAbilityMod = {-1.35,0.05,0.705},
      },
    },
    SavingThrowsAndSkills = {
      rows      = 1,
      width     = 500,
      font_size = 400,
      value     = "+0",
      hideBG    = true,
      fields = {
        StrSavingThrow = {-1.00,0.05,-0.999},
        DexSavingThrow = {-1.00,0.05,-0.926},
        ConSavingThrow = {-1.00,0.05,-0.853},
        IntSavingThrow = {-1.00,0.05,-0.780},
        WisSavingThrow = {-1.00,0.05,-0.707},
        ChaSavingThrow = {-1.00,0.05,-0.634},
        Acrobatics = {-1.00,0.05,-0.376},
        AnimalHandling = {-1.00,0.05,-0.303},
        Arcana = {-1.00,0.05,-0.230},
        Athletics = {-1.00,0.05,-0.157},
        Deception = {-1.00,0.05,-0.084},
        History = {-1.00,0.05,-0.011},
        Insight = {-1.00,0.05,0.062},
        Intimidation = {-1.00,0.05,0.135},
        Investigation = {-1.00,0.05,0.208},
        Medicine = {-1.00,0.05,0.281},
        Nature = {-1.00,0.05,0.354},
        Perception = {-1.00,0.05,0.427},
        Performance = {-1.00,0.05,0.500},
        Persuasion = {-1.00,0.05,0.573},
        Religion = {-1.00,0.05,0.646},
        SleightOfHand = {-1.00,0.05,0.719},
        Stealth = {-1.00,0.05,0.792},
        Survival = {-1.00,0.05,0.865},
      },
    },
    PassiveSkills = {
      rows      = 1,
      width     = 750,
      font_size = 600,
      value     = "10",
      hideBG    = true,
      fields = {
        Perception = {-1.42,0.05,1.10}
      }
    },
    HitDiceTotal = {
      pos       = {-0.204,0.05,-0.395},
      rows      = 1,
      width     = 500,
      font_size = 400,
      value     = "1",
      hideBG    = true,
    },
    --End of labels
  },
}

-- Borrowed from TI4 mod: https://github.com/darrellanderson/TI4-TTS/blob/main/TI4/Helpers/TI4_UnitHelper.ttslua
function getJointedHelperClient(helperObjectName)
  local function getHelperObject()
    for _, joint in ipairs(self.getJoints()) do
      local object = getObjectFromGUID(joint.joint_object_guid)
      if object.getName() == helperObjectName then return object end
    end
    error('missing jointed object "' .. helperObjectName .. '"')
  end
  return getHelperClientByFunc(getHelperObject)
end

function getHelperClient(helperObjectName)
  local function getHelperObject()
    for _, object in ipairs(getAllObjects()) do
      if object.getName() == helperObjectName then return object end
    end
    error('missing object "' .. helperObjectName .. '"')
  end
  return getHelperClientByFunc(getHelperObject)
end

function getHelperClientByFunc(helperObjectFunc)
  -- Nested tables are considered cross script.  Make a local copy.
  local function copyTable(t)
    if t and type(t) == 'table' then
      local copy = {}
      for k, v in pairs(t) do
        copy[k] = type(v) == 'table' and copyTable(v) or v
      end
      t = copy
    end
    return t
  end
  local helperObject = false
  local function getCallWrapper(functionName)
    helperObject = helperObject or helperObjectFunc()
    if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
    return function(parameters) return copyTable(helperObject.call(functionName, parameters)) end
  end
  return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end