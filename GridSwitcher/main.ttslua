data = {}
currentGridName = ''
toolBtnCount = 0
maxButtons = 36
disableSave = false
saveButtonIdx = -1
deleteButtonIdx = -1
clearButtonIdx = -1
clearConfirmation = false

function onLoad(save_state)
  initializeGridObj(JSON.decode(save_state))
  createToolControls()
  renderAllButtons()
end

function onSave()
  if disableSave then
    return ''
  end
  return JSON.encode(data)
end

function initializeGridObj(obj)
  data = obj or {
    grids = {},
    order = {}
  }
end

function deleteAllButtons()
  for _, b in ipairs(self.getButtons()) do
    if b.index >= toolBtnCount then
      self.removeButton(b.index)
    end
  end
end

function renderAllButtons()
  for _, g in ipairs(data.order) do
    addGridButton(g)
  end
end

function createToolControls()
  self.createInput({
    input_function = 'setGridName',
    function_owner = self,
    label          = 'Enter Grid Name',
    alignment      = 3,
    position       = {0,0.1,-1.35},
    width          = 1500,
    height         = 124,
  })
  self.createButton({
    click_function = 'saveGrid',
    function_owner = self,
    label          = 'Save New Grid',
    position       = {-.75,0.1,-1},
    width          = 750,
  })
  saveButtonIdx = 0
  self.createButton({
    click_function = 'deleteGrid',
    function_owner = self,
    label          = 'Delete Grid',
    position       = {.75,0.1,-1},
    width          = 750,
  })
  deleteButtonIdx = 1
  self.createButton({
    click_function = 'clearGrids',
    function_owner = self,
    label          = 'Clear All Grids',
    position       = {1.25,0.1,-1.75},
    width          = 1000,
    scale          = {.5,.5,.5},
    hover_color    = 'Red'
  })
  clearButtonIdx = 2
  resetButtonStates()
  toolBtnCount = #self.getButtons()
end

function setGridName(obj, player_clicker_color, input_value, selected)
  local saveButtonLabel = 'Save New Grid'
  if string.len(input_value) > 30 then
    input_value = string.sub(input_value, 1, 30)
    Wait.frames(function()
      self.editInput({
        index = 0,
        value = input_value
      })
    end, 1)
  end
  if data.grids[input_value] ~= nil then
    saveButtonLabel = 'Overwrite Grid'
  end
  currentGridName = input_value
  resetButtonStates()
end

function resetInput()
  currentGridName = ''
  self.editInput({
    index          = 0,
    value          = '',
  })
end

function resetButtonStates()
  local saveButtonLabel = 'Save New Grid'
  local deleteButtonLabel = '---'
  local deleteButtonColor = 'Grey'
  if data.grids[currentGridName] ~= nil then
    saveButtonLabel = 'Overwrite Grid'
    deleteButtonLabel = 'Delete Grid'
    deleteButtonColor = 'White'
  end
  self.editButton({
    index          = saveButtonIdx,
    label          = saveButtonLabel,
  })
  self.editButton({
    index          = deleteButtonIdx,
    label          = deleteButtonLabel,
    color          = deleteButtonColor,
  })
end

function saveGrid(obj, player_clicker_color, alt_click)
  if currentGridName == '' then
    return
  end
  local isNew = true
  if data.grids[currentGridName] ~= nil then
    isNew = false
  end
  data.grids[currentGridName] = {
    type = Grid.type,
    show_lines = Grid.show_lines,
    color = Grid.color,
    opacity = Grid.opacity,
    thick_lines = Grid.thick_lines,
    snapping = Grid.snapping,
    offsetX = Grid.offsetX,
    offsetY = Grid.offsetY,
    sizeX = Grid.sizeX,
    sizeY = Grid.sizeY,
  }
  if isNew then
    table.insert(data.order, currentGridName)
    addGridButton(currentGridName)
  end
  resetInput()
  resetButtonStates()
end

function restoreGrid(gridName)
  local gridData = data.grids[gridName]
  Grid.type = gridData.type
  Grid.show_lines = gridData.show_lines
  Grid.color = gridData.color
  Grid.opacity = gridData.opacity
  Grid.thick_lines = gridData.thick_lines
  Grid.snapping = gridData.snapping
  Grid.offsetX = gridData.offsetX
  Grid.offsetY = gridData.offsetY
  Grid.sizeX = gridData.sizeX
  Grid.sizeY = gridData.sizeY
end

function addGridButton(gridName)
  local buttonCount = #self.getButtons()
  local posPerc = (buttonCount - toolBtnCount) / 12
  local col, rowMod = math.modf(posPerc)
  local row = rowMod * 12
  local funcName = '_restoreGrid'..buttonCount
  local func = function()
    restoreGrid(gridName)
  end
  local lettersOverLimit = string.len(gridName) - 12
  local fontSize = 100 - math.min(50, 5 * lettersOverLimit)
  self.setVar(funcName, func)
  self.createButton({
    click_function = funcName,
    function_owner = self,
    label          = gridName,
    position       = {-1.25 + (1.25 * col), 0.1, -.7 + (.2 * row)},
    width          = 750,
    font_size       = fontSize,
    height         = 150,
    scale          = {.75,.75,.75}
  })
  checkMaxButtons()
end

function checkMaxButtons()
  if (#self.getButtons() - toolBtnCount) >= maxButtons then
    self.editButton({
      index          = 0,
      click_function = 'noop',
      function_owner = self,
      label          = 'MAX GRIDS REACHED',
    })
  end
end

function deleteGrid()
  if data.grids[currentGridName] == nil then
    return
  end
  data.grids[currentGridName] = nil
  local idx = -1
  for i, g in ipairs(data.order) do
    if g == currentGridName then
      idx = i
    end
  end
  if idx > -1 then
    table.remove(data.order, idx)
  end
  resetInput()
  resetButtonStates()
  deleteAllButtons()
  Wait.frames(function()
    renderAllButtons()
  end, 5)
end

function clearGrids(obj, player_clicker_color)
  if clearConfirmation then
    deleteAllButtons()
    resetClearButton()
    initializeGridObj()
  else
    self.editButton({
      index          = clearButtonIdx,
      label          = 'Are you sure!?',
      color          = 'Red',
      hover_color    = {.5,0,0},
    })
    clearConfirmation = true
    broadcastToColor('Click again to confirm. Resetting confirmation in 5 seconds.', player_clicker_color, 'Red')
    Wait.time(resetClearButton, 5)
  end
end

function resetClearButton()
  self.editButton({
    index          = clearButtonIdx,
    label          = 'Clear All Grids',
    color          = 'White',
    hover_color    = 'White',
  })
  clearConfirmation = false
end

function noop()
end